app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: 127.0.0.1
      port: 15432
      user: postgres
      password: password
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development # eg: production|staging|review|develop
  providers:
    ldap:
      # eg: production|staging|review|develop
      development:
        ldapAuthenticationOptions:
          userSearchBase: 'dc=organisation,dc=com' # REQUIRED
          # what is the user unique key in your ldap instance
          usernameAttribute: 'uid' # defaults to `uid`
          # directory where to search user
          # default search will be `[userSearchBase]=[username],[userSearchBase]`

          # User able to list other users, this is used
          # to check incoming JWT if user are already part of the LDAP
          # NOTE: If no admin user/pass provided we'll attempt a credential-less search
          adminDn: admin
          adminPassword: password

          ldapOpts:
              - 'ldap://localhost:1389'


scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: ldap-org
      target: ldap://localhost:1389
      rules:
        - allow: [ User, Group ]
ldap:
  providers:
    - target: ldap://localhost:1389
      bind:
        dn: dc=organisation,dc=com
        secret: password
      users:
        dn: dc=organisation,dc=com
        options:
           # One of 'base', 'one', or 'sub'.
          scope: one
          # The filter is the one that you commonly will want to specify explicitly. It
          # is a string on the standard LDAP query format. Use it to select out the set
          # of users that are of actual interest to ingest. For example, you may want
          # to filter out disabled users.
          filter: (uid=*)
          # The attribute selectors for each item, as passed to the LDAP server.
          attributes: [ '*', '+' ]
          # This field is either 'false' to disable paging when reading from the
          # server, or an object on the form '{ pageSize: 100, pagePause: true }' that
          # specifies the details of how the paging shall work.
          paged: false
      groups:
        dn: dc=organisation,dc=com
        options:
          filter: (&(objectClass=some-group-class)(!(groupType=email)))
          map:
            # The name of the attribute that holds the relative
            # distinguished name of each entry. This value is copied into a
            # well known annotation to be able to query by it later.
            rdn: cn
            # The name of the attribute that shall be used for the value of
            # the metadata.name field of the entity.
            name: cn
            # The name of the attribute that shall be used for the value of
            # the metadata.description field of the entity.
            description: description
            # The name of the attribute that shall be used for the value of
            # the spec.type field of the entity.
            type: groupType
            # The name of the attribute that shall be used for the value of
            # the spec.profile.displayName field of the entity.
            displayName: cn
            # The name of the attribute that shall be used for the value of
            # the spec.profile.email field of the entity.
            email: <nothing, left out>
            # The name of the attribute that shall be used for the value of
            # the spec.profile.picture field of the entity.
            picture: <nothing, left out>
            # The name of the attribute that shall be used for the values of
            # the spec.parent field of the entity.
            memberOf: memberOf
            # The name of the attribute that shall be used for the values of
            # the spec.children field of the entity.
            members: member